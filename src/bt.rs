#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _BYTESWAP_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_MAX: u32 = 44;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_MAX: u32 = 44;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOMAXCONN: u32 = 128;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SO_MARK: u32 = 36;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const BTPROTO_L2CAP: u32 = 0;
pub const BTPROTO_HCI: u32 = 1;
pub const BTPROTO_SCO: u32 = 2;
pub const BTPROTO_RFCOMM: u32 = 3;
pub const BTPROTO_BNEP: u32 = 4;
pub const BTPROTO_CMTP: u32 = 5;
pub const BTPROTO_HIDP: u32 = 6;
pub const BTPROTO_AVDTP: u32 = 7;
pub const SOL_HCI: u32 = 0;
pub const SOL_L2CAP: u32 = 6;
pub const SOL_SCO: u32 = 17;
pub const SOL_RFCOMM: u32 = 18;
pub const BT_SECURITY: u32 = 4;
pub const BT_SECURITY_SDP: u32 = 0;
pub const BT_SECURITY_LOW: u32 = 1;
pub const BT_SECURITY_MEDIUM: u32 = 2;
pub const BT_SECURITY_HIGH: u32 = 3;
pub const BT_SECURITY_FIPS: u32 = 4;
pub const BT_DEFER_SETUP: u32 = 7;
pub const BT_FLUSHABLE: u32 = 8;
pub const BT_FLUSHABLE_OFF: u32 = 0;
pub const BT_FLUSHABLE_ON: u32 = 1;
pub const BT_POWER: u32 = 9;
pub const BT_POWER_FORCE_ACTIVE_OFF: u32 = 0;
pub const BT_POWER_FORCE_ACTIVE_ON: u32 = 1;
pub const BT_CHANNEL_POLICY: u32 = 10;
pub const BT_CHANNEL_POLICY_BREDR_ONLY: u32 = 0;
pub const BT_CHANNEL_POLICY_BREDR_PREFERRED: u32 = 1;
pub const BT_CHANNEL_POLICY_AMP_PREFERRED: u32 = 2;
pub const BT_VOICE: u32 = 11;
pub const BT_SNDMTU: u32 = 12;
pub const BT_RCVMTU: u32 = 13;
pub const BT_VOICE_TRANSPARENT: u32 = 3;
pub const BT_VOICE_CVSD_16BIT: u32 = 96;
pub const BDADDR_BREDR: u32 = 0;
pub const BDADDR_LE_PUBLIC: u32 = 1;
pub const BDADDR_LE_RANDOM: u32 = 2;
pub const __BITS_PER_LONG: u32 = 64;
pub const SI_LOAD_SHIFT: u32 = 16;
pub const HCI_DATA_DIR: u32 = 1;
pub const HCI_FILTER: u32 = 2;
pub const HCI_TIME_STAMP: u32 = 3;
pub const HCI_CMSG_DIR: u32 = 1;
pub const HCI_CMSG_TSTAMP: u32 = 2;
pub const HCI_DEV_NONE: u32 = 65535;
pub const HCI_CHANNEL_RAW: u32 = 0;
pub const HCI_CHANNEL_USER: u32 = 1;
pub const HCI_CHANNEL_MONITOR: u32 = 2;
pub const HCI_CHANNEL_CONTROL: u32 = 3;
pub const HCI_CHANNEL_LOGGING: u32 = 4;
pub const HCI_FLT_TYPE_BITS: u32 = 31;
pub const HCI_FLT_EVENT_BITS: u32 = 63;
pub const HCI_FLT_OGF_BITS: u32 = 63;
pub const HCI_FLT_OCF_BITS: u32 = 127;
pub const IREQ_CACHE_FLUSH: u32 = 1;
pub const MGMT_INDEX_NONE: u32 = 65535;
pub const MGMT_STATUS_SUCCESS: u32 = 0;
pub const MGMT_STATUS_UNKNOWN_COMMAND: u32 = 1;
pub const MGMT_STATUS_NOT_CONNECTED: u32 = 2;
pub const MGMT_STATUS_FAILED: u32 = 3;
pub const MGMT_STATUS_CONNECT_FAILED: u32 = 4;
pub const MGMT_STATUS_AUTH_FAILED: u32 = 5;
pub const MGMT_STATUS_NOT_PAIRED: u32 = 6;
pub const MGMT_STATUS_NO_RESOURCES: u32 = 7;
pub const MGMT_STATUS_TIMEOUT: u32 = 8;
pub const MGMT_STATUS_ALREADY_CONNECTED: u32 = 9;
pub const MGMT_STATUS_BUSY: u32 = 10;
pub const MGMT_STATUS_REJECTED: u32 = 11;
pub const MGMT_STATUS_NOT_SUPPORTED: u32 = 12;
pub const MGMT_STATUS_INVALID_PARAMS: u32 = 13;
pub const MGMT_STATUS_DISCONNECTED: u32 = 14;
pub const MGMT_STATUS_NOT_POWERED: u32 = 15;
pub const MGMT_STATUS_CANCELLED: u32 = 16;
pub const MGMT_STATUS_INVALID_INDEX: u32 = 17;
pub const MGMT_STATUS_RFKILLED: u32 = 18;
pub const MGMT_STATUS_ALREADY_PAIRED: u32 = 19;
pub const MGMT_STATUS_PERMISSION_DENIED: u32 = 20;
pub const MGMT_HDR_SIZE: u32 = 6;
pub const MGMT_OP_READ_VERSION: u32 = 1;
pub const MGMT_OP_READ_COMMANDS: u32 = 2;
pub const MGMT_OP_READ_INDEX_LIST: u32 = 3;
pub const MGMT_MAX_NAME_LENGTH: u32 = 249;
pub const MGMT_MAX_SHORT_NAME_LENGTH: u32 = 11;
pub const MGMT_SETTING_POWERED: u32 = 1;
pub const MGMT_SETTING_CONNECTABLE: u32 = 2;
pub const MGMT_SETTING_FAST_CONNECTABLE: u32 = 4;
pub const MGMT_SETTING_DISCOVERABLE: u32 = 8;
pub const MGMT_SETTING_BONDABLE: u32 = 16;
pub const MGMT_SETTING_LINK_SECURITY: u32 = 32;
pub const MGMT_SETTING_SSP: u32 = 64;
pub const MGMT_SETTING_BREDR: u32 = 128;
pub const MGMT_SETTING_HS: u32 = 256;
pub const MGMT_SETTING_LE: u32 = 512;
pub const MGMT_SETTING_ADVERTISING: u32 = 1024;
pub const MGMT_SETTING_SECURE_CONN: u32 = 2048;
pub const MGMT_SETTING_DEBUG_KEYS: u32 = 4096;
pub const MGMT_SETTING_PRIVACY: u32 = 8192;
pub const MGMT_SETTING_CONFIGURATION: u32 = 16384;
pub const MGMT_SETTING_STATIC_ADDRESS: u32 = 32768;
pub const MGMT_OP_READ_INFO: u32 = 4;
pub const MGMT_OP_SET_POWERED: u32 = 5;
pub const MGMT_OP_SET_DISCOVERABLE: u32 = 6;
pub const MGMT_OP_SET_CONNECTABLE: u32 = 7;
pub const MGMT_OP_SET_FAST_CONNECTABLE: u32 = 8;
pub const MGMT_OP_SET_BONDABLE: u32 = 9;
pub const MGMT_OP_SET_LINK_SECURITY: u32 = 10;
pub const MGMT_OP_SET_SSP: u32 = 11;
pub const MGMT_OP_SET_HS: u32 = 12;
pub const MGMT_OP_SET_LE: u32 = 13;
pub const MGMT_OP_SET_DEV_CLASS: u32 = 14;
pub const MGMT_OP_SET_LOCAL_NAME: u32 = 15;
pub const MGMT_OP_ADD_UUID: u32 = 16;
pub const MGMT_OP_REMOVE_UUID: u32 = 17;
pub const MGMT_OP_LOAD_LINK_KEYS: u32 = 18;
pub const MGMT_OP_LOAD_LONG_TERM_KEYS: u32 = 19;
pub const MGMT_OP_DISCONNECT: u32 = 20;
pub const MGMT_OP_GET_CONNECTIONS: u32 = 21;
pub const MGMT_OP_PIN_CODE_REPLY: u32 = 22;
pub const MGMT_OP_PIN_CODE_NEG_REPLY: u32 = 23;
pub const MGMT_OP_SET_IO_CAPABILITY: u32 = 24;
pub const MGMT_OP_PAIR_DEVICE: u32 = 25;
pub const MGMT_OP_CANCEL_PAIR_DEVICE: u32 = 26;
pub const MGMT_OP_UNPAIR_DEVICE: u32 = 27;
pub const MGMT_OP_USER_CONFIRM_REPLY: u32 = 28;
pub const MGMT_OP_USER_CONFIRM_NEG_REPLY: u32 = 29;
pub const MGMT_OP_USER_PASSKEY_REPLY: u32 = 30;
pub const MGMT_OP_USER_PASSKEY_NEG_REPLY: u32 = 31;
pub const MGMT_OP_READ_LOCAL_OOB_DATA: u32 = 32;
pub const MGMT_OP_ADD_REMOTE_OOB_DATA: u32 = 33;
pub const MGMT_OP_REMOVE_REMOTE_OOB_DATA: u32 = 34;
pub const MGMT_OP_START_DISCOVERY: u32 = 35;
pub const MGMT_OP_STOP_DISCOVERY: u32 = 36;
pub const MGMT_OP_CONFIRM_NAME: u32 = 37;
pub const MGMT_OP_BLOCK_DEVICE: u32 = 38;
pub const MGMT_OP_UNBLOCK_DEVICE: u32 = 39;
pub const MGMT_OP_SET_DEVICE_ID: u32 = 40;
pub const MGMT_OP_SET_ADVERTISING: u32 = 41;
pub const MGMT_OP_SET_BREDR: u32 = 42;
pub const MGMT_OP_SET_STATIC_ADDRESS: u32 = 43;
pub const MGMT_OP_SET_SCAN_PARAMS: u32 = 44;
pub const MGMT_OP_SET_SECURE_CONN: u32 = 45;
pub const MGMT_OP_SET_DEBUG_KEYS: u32 = 46;
pub const MGMT_OP_SET_PRIVACY: u32 = 47;
pub const MGMT_OP_LOAD_IRKS: u32 = 48;
pub const MGMT_OP_GET_CONN_INFO: u32 = 49;
pub const MGMT_OP_GET_CLOCK_INFO: u32 = 50;
pub const MGMT_OP_ADD_DEVICE: u32 = 51;
pub const MGMT_OP_REMOVE_DEVICE: u32 = 52;
pub const MGMT_OP_LOAD_CONN_PARAM: u32 = 53;
pub const MGMT_OP_READ_UNCONF_INDEX_LIST: u32 = 54;
pub const MGMT_OPTION_EXTERNAL_CONFIG: u32 = 1;
pub const MGMT_OPTION_PUBLIC_ADDRESS: u32 = 2;
pub const MGMT_OP_READ_CONFIG_INFO: u32 = 55;
pub const MGMT_OP_SET_EXTERNAL_CONFIG: u32 = 56;
pub const MGMT_OP_SET_PUBLIC_ADDRESS: u32 = 57;
pub const MGMT_OP_START_SERVICE_DISCOVERY: u32 = 58;
pub const MGMT_OP_READ_LOCAL_OOB_EXT_DATA: u32 = 59;
pub const MGMT_OP_READ_EXT_INDEX_LIST: u32 = 60;
pub const MGMT_OP_READ_ADV_FEATURES: u32 = 61;
pub const MGMT_OP_ADD_ADVERTISING: u32 = 62;
pub const MGMT_ADV_FLAG_CONNECTABLE: u32 = 1;
pub const MGMT_ADV_FLAG_DISCOV: u32 = 2;
pub const MGMT_ADV_FLAG_LIMITED_DISCOV: u32 = 4;
pub const MGMT_ADV_FLAG_MANAGED_FLAGS: u32 = 8;
pub const MGMT_ADV_FLAG_TX_POWER: u32 = 16;
pub const MGMT_ADV_FLAG_APPEARANCE: u32 = 32;
pub const MGMT_ADV_FLAG_LOCAL_NAME: u32 = 64;
pub const MGMT_OP_REMOVE_ADVERTISING: u32 = 63;
pub const MGMT_REMOVE_ADVERTISING_SIZE: u32 = 1;
pub const MGMT_OP_GET_ADV_SIZE_INFO: u32 = 64;
pub const MGMT_GET_ADV_SIZE_INFO_SIZE: u32 = 5;
pub const MGMT_OP_START_LIMITED_DISCOVERY: u32 = 65;
pub const MGMT_OP_READ_EXT_INFO: u32 = 66;
pub const MGMT_OP_SET_APPEARANCE: u32 = 67;
pub const MGMT_EV_CMD_COMPLETE: u32 = 1;
pub const MGMT_EV_CMD_STATUS: u32 = 2;
pub const MGMT_EV_CONTROLLER_ERROR: u32 = 3;
pub const MGMT_EV_INDEX_ADDED: u32 = 4;
pub const MGMT_EV_INDEX_REMOVED: u32 = 5;
pub const MGMT_EV_NEW_SETTINGS: u32 = 6;
pub const MGMT_EV_CLASS_OF_DEV_CHANGED: u32 = 7;
pub const MGMT_EV_LOCAL_NAME_CHANGED: u32 = 8;
pub const MGMT_EV_NEW_LINK_KEY: u32 = 9;
pub const MGMT_EV_NEW_LONG_TERM_KEY: u32 = 10;
pub const MGMT_EV_DEVICE_CONNECTED: u32 = 11;
pub const MGMT_DEV_DISCONN_UNKNOWN: u32 = 0;
pub const MGMT_DEV_DISCONN_TIMEOUT: u32 = 1;
pub const MGMT_DEV_DISCONN_LOCAL_HOST: u32 = 2;
pub const MGMT_DEV_DISCONN_REMOTE: u32 = 3;
pub const MGMT_EV_DEVICE_DISCONNECTED: u32 = 12;
pub const MGMT_EV_CONNECT_FAILED: u32 = 13;
pub const MGMT_EV_PIN_CODE_REQUEST: u32 = 14;
pub const MGMT_EV_USER_CONFIRM_REQUEST: u32 = 15;
pub const MGMT_EV_USER_PASSKEY_REQUEST: u32 = 16;
pub const MGMT_EV_AUTH_FAILED: u32 = 17;
pub const MGMT_DEV_FOUND_CONFIRM_NAME: u32 = 1;
pub const MGMT_DEV_FOUND_LEGACY_PAIRING: u32 = 2;
pub const MGMT_DEV_FOUND_NOT_CONNECTABLE: u32 = 4;
pub const MGMT_EV_DEVICE_FOUND: u32 = 18;
pub const MGMT_EV_DISCOVERING: u32 = 19;
pub const MGMT_EV_DEVICE_BLOCKED: u32 = 20;
pub const MGMT_EV_DEVICE_UNBLOCKED: u32 = 21;
pub const MGMT_EV_DEVICE_UNPAIRED: u32 = 22;
pub const MGMT_EV_PASSKEY_NOTIFY: u32 = 23;
pub const MGMT_EV_NEW_IRK: u32 = 24;
pub const MGMT_EV_NEW_CSRK: u32 = 25;
pub const MGMT_EV_DEVICE_ADDED: u32 = 26;
pub const MGMT_EV_DEVICE_REMOVED: u32 = 27;
pub const MGMT_EV_NEW_CONN_PARAM: u32 = 28;
pub const MGMT_EV_UNCONF_INDEX_ADDED: u32 = 29;
pub const MGMT_EV_UNCONF_INDEX_REMOVED: u32 = 30;
pub const MGMT_EV_NEW_CONFIG_OPTIONS: u32 = 31;
pub const MGMT_EV_EXT_INDEX_ADDED: u32 = 32;
pub const MGMT_EV_EXT_INDEX_REMOVED: u32 = 33;
pub const MGMT_EV_LOCAL_OOB_DATA_UPDATED: u32 = 34;
pub const MGMT_EV_ADVERTISING_ADDED: u32 = 35;
pub const MGMT_EV_ADVERTISING_REMOVED: u32 = 36;
pub const MGMT_EV_EXT_INFO_CHANGED: u32 = 37;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
                    -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void, arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "\u{1}stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
                  -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
                          -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = u32;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
                  -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_4 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_4 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_4 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_4 = 4;
pub const IPPROTO_TCP: _bindgen_ty_4 = 6;
pub const IPPROTO_EGP: _bindgen_ty_4 = 8;
pub const IPPROTO_PUP: _bindgen_ty_4 = 12;
pub const IPPROTO_UDP: _bindgen_ty_4 = 17;
pub const IPPROTO_IDP: _bindgen_ty_4 = 22;
pub const IPPROTO_TP: _bindgen_ty_4 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_4 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_4 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_4 = 46;
pub const IPPROTO_GRE: _bindgen_ty_4 = 47;
pub const IPPROTO_ESP: _bindgen_ty_4 = 50;
pub const IPPROTO_AH: _bindgen_ty_4 = 51;
pub const IPPROTO_MTP: _bindgen_ty_4 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_4 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_4 = 98;
pub const IPPROTO_PIM: _bindgen_ty_4 = 103;
pub const IPPROTO_COMP: _bindgen_ty_4 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_4 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_4 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_4 = 137;
pub const IPPROTO_RAW: _bindgen_ty_4 = 255;
pub const IPPROTO_MAX: _bindgen_ty_4 = 256;
pub type _bindgen_ty_4 = u32;
pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_5 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_5 = 58;
pub const IPPROTO_NONE: _bindgen_ty_5 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = 60;
pub const IPPROTO_MH: _bindgen_ty_5 = 135;
pub type _bindgen_ty_5 = u32;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_6 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_6 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_6 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_6 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_6 = 15;
pub const IPPORT_FTP: _bindgen_ty_6 = 21;
pub const IPPORT_TELNET: _bindgen_ty_6 = 23;
pub const IPPORT_SMTP: _bindgen_ty_6 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_6 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_6 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_6 = 43;
pub const IPPORT_MTP: _bindgen_ty_6 = 57;
pub const IPPORT_TFTP: _bindgen_ty_6 = 69;
pub const IPPORT_RJE: _bindgen_ty_6 = 77;
pub const IPPORT_FINGER: _bindgen_ty_6 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_6 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_6 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_6 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_6 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_6 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_6 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_6 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_6 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_6 = 5000;
pub type _bindgen_ty_6 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}in6addr_any"]
    pub static in6addr_any: in6_addr;
}
extern "C" {
    #[link_name = "\u{1}in6addr_loopback"]
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_security {
    pub level: u8,
    pub key_size: u8,
}
#[test]
fn bindgen_test_layout_bt_security() {
    assert_eq!(
        ::std::mem::size_of::<bt_security>(),
        2usize,
        concat!("Size of: ", stringify!(bt_security))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_security>(),
        1usize,
        concat!("Alignment of ", stringify!(bt_security))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_security>())).level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_security),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_security>())).key_size as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_security),
            "::",
            stringify!(key_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_power {
    pub force_active: u8,
}
#[test]
fn bindgen_test_layout_bt_power() {
    assert_eq!(
        ::std::mem::size_of::<bt_power>(),
        1usize,
        concat!("Size of: ", stringify!(bt_power))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_power>(),
        1usize,
        concat!("Alignment of ", stringify!(bt_power))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_power>())).force_active as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_power),
            "::",
            stringify!(force_active)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_voice {
    pub setting: u16,
}
#[test]
fn bindgen_test_layout_bt_voice() {
    assert_eq!(
        ::std::mem::size_of::<bt_voice>(),
        2usize,
        concat!("Size of: ", stringify!(bt_voice))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_voice>(),
        2usize,
        concat!("Alignment of ", stringify!(bt_voice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_voice>())).setting as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_voice),
            "::",
            stringify!(setting)
        )
    );
}
pub const BT_CONNECTED: _bindgen_ty_7 = 1;
pub const BT_OPEN: _bindgen_ty_7 = 2;
pub const BT_BOUND: _bindgen_ty_7 = 3;
pub const BT_LISTEN: _bindgen_ty_7 = 4;
pub const BT_CONNECT: _bindgen_ty_7 = 5;
pub const BT_CONNECT2: _bindgen_ty_7 = 6;
pub const BT_CONFIG: _bindgen_ty_7 = 7;
pub const BT_DISCONN: _bindgen_ty_7 = 8;
pub const BT_CLOSED: _bindgen_ty_7 = 9;
pub type _bindgen_ty_7 = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct bdaddr_t {
    pub b: [u8; 6usize],
}
#[test]
fn bindgen_test_layout_bdaddr_t() {
    assert_eq!(
        ::std::mem::size_of::<bdaddr_t>(),
        6usize,
        concat!("Size of: ", stringify!(bdaddr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bdaddr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(bdaddr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bdaddr_t>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bdaddr_t),
            "::",
            stringify!(b)
        )
    );
}
extern "C" {
    pub fn baswap(dst: *mut bdaddr_t, src: *const bdaddr_t);
}
extern "C" {
    pub fn strtoba(str: *const ::std::os::raw::c_char) -> *mut bdaddr_t;
}
extern "C" {
    pub fn batostr(ba: *const bdaddr_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ba2str(ba: *const bdaddr_t, str: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn str2ba(str: *const ::std::os::raw::c_char, ba: *mut bdaddr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ba2oui(ba: *const bdaddr_t, oui: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bachk(str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn baprintf(format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bafprintf(
        stream: *mut FILE,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn basprintf(
        str: *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn basnprintf(
        str: *mut ::std::os::raw::c_char,
        size: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn bt_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn bt_error(code: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_compidtostr(id: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint128_t {
    pub data: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_uint128_t() {
    assert_eq!(
        ::std::mem::size_of::<uint128_t>(),
        16usize,
        concat!("Size of: ", stringify!(uint128_t))
    );
    assert_eq!(
        ::std::mem::align_of::<uint128_t>(),
        1usize,
        concat!("Alignment of ", stringify!(uint128_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<uint128_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uint128_t),
            "::",
            stringify!(data)
        )
    );
}

pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}

pub type __kernel_sighandler_t =
::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}

pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;

#[repr(C)]
#[derive(Debug)]
pub struct sysinfo {
    pub uptime: __kernel_long_t,
    pub loads: [__kernel_ulong_t; 3usize],
    pub totalram: __kernel_ulong_t,
    pub freeram: __kernel_ulong_t,
    pub sharedram: __kernel_ulong_t,
    pub bufferram: __kernel_ulong_t,
    pub totalswap: __kernel_ulong_t,
    pub freeswap: __kernel_ulong_t,
    pub procs: __u16,
    pub pad: __u16,
    pub totalhigh: __kernel_ulong_t,
    pub freehigh: __kernel_ulong_t,
    pub mem_unit: __u32,
    pub _f: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sysinfo() {
    assert_eq!(
        ::std::mem::size_of::<sysinfo>(),
        112usize,
        concat!("Size of: ", stringify!(sysinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sysinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(sysinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).uptime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(uptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).loads as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(loads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).totalram as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).freeram as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freeram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).sharedram as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(sharedram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).bufferram as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(bufferram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).totalswap as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).freeswap as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freeswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).procs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(procs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).pad as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).totalhigh as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalhigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).freehigh as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freehigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).mem_unit as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(mem_unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>()))._f as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(_f)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_hci {
    pub hci_family: sa_family_t,
    pub hci_dev: ::std::os::raw::c_ushort,
    pub hci_channel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_sockaddr_hci() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_hci>(),
        6usize,
        concat!("Size of: ", stringify!(sockaddr_hci))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_hci>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr_hci))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_hci>())).hci_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_hci>())).hci_dev as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_hci>())).hci_channel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_channel)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_filter {
    pub type_mask: ::std::os::raw::c_ulong,
    pub event_mask: [::std::os::raw::c_ulong; 2usize],
    pub opcode: __le16,
}
#[test]
fn bindgen_test_layout_hci_filter() {
    assert_eq!(
        ::std::mem::size_of::<hci_filter>(),
        32usize,
        concat!("Size of: ", stringify!(hci_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(hci_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_filter>())).type_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_filter),
            "::",
            stringify!(type_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_filter>())).event_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_filter),
            "::",
            stringify!(event_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_filter>())).opcode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_filter),
            "::",
            stringify!(opcode)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_ufilter {
    pub type_mask: __u32,
    pub event_mask: [__u32; 2usize],
    pub opcode: __le16,
}
#[test]
fn bindgen_test_layout_hci_ufilter() {
    assert_eq!(
        ::std::mem::size_of::<hci_ufilter>(),
        16usize,
        concat!("Size of: ", stringify!(hci_ufilter))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_ufilter>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_ufilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_ufilter>())).type_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_ufilter),
            "::",
            stringify!(type_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_ufilter>())).event_mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_ufilter),
            "::",
            stringify!(event_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_ufilter>())).opcode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_ufilter),
            "::",
            stringify!(opcode)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_stats {
    pub err_rx: __u32,
    pub err_tx: __u32,
    pub cmd_tx: __u32,
    pub evt_rx: __u32,
    pub acl_tx: __u32,
    pub acl_rx: __u32,
    pub sco_tx: __u32,
    pub sco_rx: __u32,
    pub byte_rx: __u32,
    pub byte_tx: __u32,
}
#[test]
fn bindgen_test_layout_hci_dev_stats() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_stats>(),
        40usize,
        concat!("Size of: ", stringify!(hci_dev_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).err_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(err_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).err_tx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(err_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).cmd_tx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(cmd_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).evt_rx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(evt_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).acl_tx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(acl_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).acl_rx as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(acl_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).sco_tx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(sco_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).sco_rx as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(sco_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).byte_rx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(byte_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).byte_tx as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(byte_tx)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_info {
    pub dev_id: __u16,
    pub name: [::std::os::raw::c_char; 8usize],
    pub bdaddr: bdaddr_t,
    pub flags: __u32,
    pub type_: __u8,
    pub features: [__u8; 8usize],
    pub pkt_type: __u32,
    pub link_policy: __u32,
    pub link_mode: __u32,
    pub acl_mtu: __u16,
    pub acl_pkts: __u16,
    pub sco_mtu: __u16,
    pub sco_pkts: __u16,
    pub stat: hci_dev_stats,
}
#[test]
fn bindgen_test_layout_hci_dev_info() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_info>(),
        92usize,
        concat!("Size of: ", stringify!(hci_dev_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_info>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).dev_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).name as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).bdaddr as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).type_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).features as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).pkt_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(pkt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).link_policy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(link_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).link_mode as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(link_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).acl_mtu as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(acl_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).acl_pkts as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(acl_pkts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).sco_mtu as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(sco_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).sco_pkts as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(sco_pkts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).stat as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(stat)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_conn_info {
    pub handle: __u16,
    pub bdaddr: bdaddr_t,
    pub type_: __u8,
    pub out: __u8,
    pub state: __u16,
    pub link_mode: __u32,
}
#[test]
fn bindgen_test_layout_hci_conn_info() {
    assert_eq!(
        ::std::mem::size_of::<hci_conn_info>(),
        16usize,
        concat!("Size of: ", stringify!(hci_conn_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_conn_info>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_conn_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).bdaddr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).out as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).state as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info>())).link_mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info),
            "::",
            stringify!(link_mode)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_req {
    pub dev_id: __u16,
    pub dev_opt: __u32,
}
#[test]
fn bindgen_test_layout_hci_dev_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_req>(),
        8usize,
        concat!("Size of: ", stringify!(hci_dev_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_req>())).dev_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_req),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_req>())).dev_opt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_req),
            "::",
            stringify!(dev_opt)
        )
    );
}

#[repr(C)]
#[derive(Debug)]
pub struct hci_dev_list_req {
    pub dev_num: __u16,
    pub dev_req: __IncompleteArrayField<hci_dev_req>,
}
#[test]
fn bindgen_test_layout_hci_dev_list_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_list_req>(),
        4usize,
        concat!("Size of: ", stringify!(hci_dev_list_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_list_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_list_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_list_req>())).dev_num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_list_req),
            "::",
            stringify!(dev_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_list_req>())).dev_req as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_list_req),
            "::",
            stringify!(dev_req)
        )
    );
}

#[repr(C)]
#[derive(Debug)]
pub struct hci_conn_list_req {
    pub dev_id: __u16,
    pub conn_num: __u16,
    pub conn_info: __IncompleteArrayField<hci_conn_info>,
}
#[test]
fn bindgen_test_layout_hci_conn_list_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_conn_list_req>(),
        4usize,
        concat!("Size of: ", stringify!(hci_conn_list_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_conn_list_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_conn_list_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_list_req>())).dev_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_list_req),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_list_req>())).conn_num as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_list_req),
            "::",
            stringify!(conn_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_list_req>())).conn_info as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_list_req),
            "::",
            stringify!(conn_info)
        )
    );
}

#[repr(C)]
#[derive(Debug)]
pub struct hci_conn_info_req {
    pub bdaddr: bdaddr_t,
    pub type_: __u8,
    pub conn_info: __IncompleteArrayField<hci_conn_info>,
}
#[test]
fn bindgen_test_layout_hci_conn_info_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_conn_info_req>(),
        8usize,
        concat!("Size of: ", stringify!(hci_conn_info_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_conn_info_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_conn_info_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info_req>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info_req),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info_req>())).type_ as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info_req),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_conn_info_req>())).conn_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_conn_info_req),
            "::",
            stringify!(conn_info)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_auth_info_req {
    pub bdaddr: bdaddr_t,
    pub type_: __u8,
}
#[test]
fn bindgen_test_layout_hci_auth_info_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_auth_info_req>(),
        7usize,
        concat!("Size of: ", stringify!(hci_auth_info_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_auth_info_req>(),
        1usize,
        concat!("Alignment of ", stringify!(hci_auth_info_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_auth_info_req>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_auth_info_req),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_auth_info_req>())).type_ as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_auth_info_req),
            "::",
            stringify!(type_)
        )
    );
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_inquiry_req {
    pub dev_id: __u16,
    pub flags: __u16,
    pub lap: [__u8; 3usize],
    pub length: __u8,
    pub num_rsp: __u8,
}
#[test]
fn bindgen_test_layout_hci_inquiry_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_inquiry_req>(),
        10usize,
        concat!("Size of: ", stringify!(hci_inquiry_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_inquiry_req>(),
        2usize,
        concat!("Alignment of ", stringify!(hci_inquiry_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_inquiry_req>())).dev_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_inquiry_req),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_inquiry_req>())).flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_inquiry_req),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_inquiry_req>())).lap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_inquiry_req),
            "::",
            stringify!(lap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_inquiry_req>())).length as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_inquiry_req),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_inquiry_req>())).num_rsp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_inquiry_req),
            "::",
            stringify!(num_rsp)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_hdr {
    pub opcode: u16,
    pub index: u16,
    pub len: u16,
}
#[test]
fn bindgen_test_layout_mgmt_hdr() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_hdr>(),
        6usize,
        concat!("Size of: ", stringify!(mgmt_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_hdr>())).opcode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_hdr),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_hdr>())).index as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_hdr),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_hdr>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_hdr),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_addr_info {
    pub bdaddr: bdaddr_t,
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_mgmt_addr_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_addr_info>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_addr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_addr_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_addr_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_addr_info>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_addr_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_addr_info>())).type_ as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_addr_info),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_read_version {
    pub version: u8,
    pub revision: u16,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_version() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_version>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_version))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_version>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_version>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_version),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_version>())).revision as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_version),
            "::",
            stringify!(revision)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_rp_read_commands {
    pub num_commands: u16,
    pub num_events: u16,
    pub opcodes: __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_commands() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_commands>(),
        4usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_commands))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_commands>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_commands))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_commands>())).num_commands as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_commands),
            "::",
            stringify!(num_commands)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_commands>())).num_events as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_commands),
            "::",
            stringify!(num_events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_commands>())).opcodes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_commands),
            "::",
            stringify!(opcodes)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_rp_read_index_list {
    pub num_controllers: u16,
    pub index: __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_index_list() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_index_list>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_index_list))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_index_list>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_index_list))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_index_list>())).num_controllers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_index_list),
            "::",
            stringify!(num_controllers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_index_list>())).index as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_index_list),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct mgmt_rp_read_info {
    pub bdaddr: bdaddr_t,
    pub version: u8,
    pub manufacturer: u16,
    pub supported_settings: u32,
    pub current_settings: u32,
    pub dev_class: [u8; 3usize],
    pub name: [u8; 249usize],
    pub short_name: [u8; 11usize],
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_info>(),
        280usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_info>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_info>())).version as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_info>())).manufacturer as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(manufacturer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_info>())).supported_settings as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(supported_settings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_info>())).current_settings as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(current_settings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_info>())).dev_class as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(dev_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_info>())).name as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_info>())).short_name as *const _ as usize },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_info),
            "::",
            stringify!(short_name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_mode {
    pub val: u8,
}
#[test]
fn bindgen_test_layout_mgmt_mode() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_mode>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_mode))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_mode>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_mode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_mode>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_mode),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cod {
    pub val: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_mgmt_cod() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cod>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_cod))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cod>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cod>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cod),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_discoverable {
    pub val: u8,
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_discoverable() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_discoverable>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_discoverable))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_discoverable>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_discoverable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_set_discoverable>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_discoverable),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_set_discoverable>())).timeout as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_discoverable),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_dev_class {
    pub major: u8,
    pub minor: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_dev_class() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_dev_class>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_dev_class))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_dev_class>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_dev_class))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_set_dev_class>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_dev_class),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_set_dev_class>())).minor as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_dev_class),
            "::",
            stringify!(minor)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct mgmt_cp_set_local_name {
    pub name: [u8; 249usize],
    pub short_name: [u8; 11usize],
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_local_name() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_local_name>(),
        260usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_local_name))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_local_name>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_local_name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_set_local_name>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_local_name),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_set_local_name>())).short_name as *const _ as usize
        },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_local_name),
            "::",
            stringify!(short_name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_add_uuid {
    pub uuid: [u8; 16usize],
    pub svc_hint: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_add_uuid() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_add_uuid>(),
        17usize,
        concat!("Size of: ", stringify!(mgmt_cp_add_uuid))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_add_uuid>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_add_uuid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_add_uuid>())).uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_uuid),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_add_uuid>())).svc_hint as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_uuid),
            "::",
            stringify!(svc_hint)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_remove_uuid {
    pub uuid: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_mgmt_cp_remove_uuid() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_remove_uuid>(),
        16usize,
        concat!("Size of: ", stringify!(mgmt_cp_remove_uuid))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_remove_uuid>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_remove_uuid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_remove_uuid>())).uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_remove_uuid),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_link_key_info {
    pub addr: mgmt_addr_info,
    pub type_: u8,
    pub val: [u8; 16usize],
    pub pin_len: u8,
}
#[test]
fn bindgen_test_layout_mgmt_link_key_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_link_key_info>(),
        25usize,
        concat!("Size of: ", stringify!(mgmt_link_key_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_link_key_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_link_key_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_link_key_info>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_link_key_info),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_link_key_info>())).type_ as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_link_key_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_link_key_info>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_link_key_info),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_link_key_info>())).pin_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_link_key_info),
            "::",
            stringify!(pin_len)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_cp_load_link_keys {
    pub debug_keys: u8,
    pub key_count: u16,
    pub keys: __IncompleteArrayField<mgmt_link_key_info>,
}
#[test]
fn bindgen_test_layout_mgmt_cp_load_link_keys() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_load_link_keys>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_cp_load_link_keys))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_load_link_keys>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_load_link_keys))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_load_link_keys>())).debug_keys as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_load_link_keys),
            "::",
            stringify!(debug_keys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_load_link_keys>())).key_count as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_load_link_keys),
            "::",
            stringify!(key_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_load_link_keys>())).keys as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_load_link_keys),
            "::",
            stringify!(keys)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ltk_info {
    pub addr: mgmt_addr_info,
    pub type_: u8,
    pub master: u8,
    pub enc_size: u8,
    pub ediv: u16,
    pub rand: u64,
    pub val: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_mgmt_ltk_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ltk_info>(),
        36usize,
        concat!("Size of: ", stringify!(mgmt_ltk_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ltk_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ltk_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ltk_info>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ltk_info),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ltk_info>())).type_ as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ltk_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ltk_info>())).master as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ltk_info),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ltk_info>())).enc_size as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ltk_info),
            "::",
            stringify!(enc_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ltk_info>())).ediv as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ltk_info),
            "::",
            stringify!(ediv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ltk_info>())).rand as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ltk_info),
            "::",
            stringify!(rand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ltk_info>())).val as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ltk_info),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_cp_load_long_term_keys {
    pub key_count: u16,
    pub keys: __IncompleteArrayField<mgmt_ltk_info>,
}
#[test]
fn bindgen_test_layout_mgmt_cp_load_long_term_keys() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_load_long_term_keys>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_cp_load_long_term_keys))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_load_long_term_keys>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_load_long_term_keys))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_load_long_term_keys>())).key_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_load_long_term_keys),
            "::",
            stringify!(key_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_load_long_term_keys>())).keys as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_load_long_term_keys),
            "::",
            stringify!(keys)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_disconnect {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_cp_disconnect() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_disconnect>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_cp_disconnect))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_disconnect>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_disconnect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_disconnect>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_disconnect),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_disconnect {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_rp_disconnect() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_disconnect>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_rp_disconnect))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_disconnect>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_disconnect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_disconnect>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_disconnect),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_rp_get_connections {
    pub conn_count: u16,
    pub addr: __IncompleteArrayField<mgmt_addr_info>,
}
#[test]
fn bindgen_test_layout_mgmt_rp_get_connections() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_get_connections>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_rp_get_connections))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_get_connections>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_get_connections))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_get_connections>())).conn_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_connections),
            "::",
            stringify!(conn_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_get_connections>())).addr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_connections),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_pin_code_reply {
    pub addr: mgmt_addr_info,
    pub pin_len: u8,
    pub pin_code: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_mgmt_cp_pin_code_reply() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_pin_code_reply>(),
        24usize,
        concat!("Size of: ", stringify!(mgmt_cp_pin_code_reply))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_pin_code_reply>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_pin_code_reply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_pin_code_reply>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_pin_code_reply),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_pin_code_reply>())).pin_len as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_pin_code_reply),
            "::",
            stringify!(pin_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_pin_code_reply>())).pin_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_pin_code_reply),
            "::",
            stringify!(pin_code)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_pin_code_neg_reply {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_cp_pin_code_neg_reply() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_pin_code_neg_reply>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_cp_pin_code_neg_reply))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_pin_code_neg_reply>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_pin_code_neg_reply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_pin_code_neg_reply>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_pin_code_neg_reply),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_io_capability {
    pub io_capability: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_io_capability() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_io_capability>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_io_capability))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_io_capability>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_io_capability))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_set_io_capability>())).io_capability as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_io_capability),
            "::",
            stringify!(io_capability)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_pair_device {
    pub addr: mgmt_addr_info,
    pub io_cap: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_pair_device() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_pair_device>(),
        8usize,
        concat!("Size of: ", stringify!(mgmt_cp_pair_device))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_pair_device>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_pair_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_pair_device>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_pair_device),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_pair_device>())).io_cap as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_pair_device),
            "::",
            stringify!(io_cap)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_pair_device {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_rp_pair_device() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_pair_device>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_rp_pair_device))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_pair_device>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_pair_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_pair_device>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_pair_device),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_unpair_device {
    pub addr: mgmt_addr_info,
    pub disconnect: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_unpair_device() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_unpair_device>(),
        8usize,
        concat!("Size of: ", stringify!(mgmt_cp_unpair_device))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_unpair_device>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_unpair_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_unpair_device>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_unpair_device),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_unpair_device>())).disconnect as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_unpair_device),
            "::",
            stringify!(disconnect)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_unpair_device {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_rp_unpair_device() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_unpair_device>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_rp_unpair_device))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_unpair_device>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_unpair_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_unpair_device>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_unpair_device),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_user_confirm_reply {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_cp_user_confirm_reply() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_user_confirm_reply>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_cp_user_confirm_reply))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_user_confirm_reply>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_user_confirm_reply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_user_confirm_reply>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_user_confirm_reply),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_user_confirm_reply {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_rp_user_confirm_reply() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_user_confirm_reply>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_rp_user_confirm_reply))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_user_confirm_reply>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_user_confirm_reply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_user_confirm_reply>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_user_confirm_reply),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_user_passkey_reply {
    pub addr: mgmt_addr_info,
    pub passkey: u32,
}
#[test]
fn bindgen_test_layout_mgmt_cp_user_passkey_reply() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_user_passkey_reply>(),
        11usize,
        concat!("Size of: ", stringify!(mgmt_cp_user_passkey_reply))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_user_passkey_reply>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_user_passkey_reply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_user_passkey_reply>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_user_passkey_reply),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_user_passkey_reply>())).passkey as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_user_passkey_reply),
            "::",
            stringify!(passkey)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_user_passkey_reply {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_rp_user_passkey_reply() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_user_passkey_reply>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_rp_user_passkey_reply))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_user_passkey_reply>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_user_passkey_reply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_user_passkey_reply>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_user_passkey_reply),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_user_passkey_neg_reply {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_cp_user_passkey_neg_reply() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_user_passkey_neg_reply>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_cp_user_passkey_neg_reply))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_user_passkey_neg_reply>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_user_passkey_neg_reply))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_user_passkey_neg_reply>())).addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_user_passkey_neg_reply),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_read_local_oob_data {
    pub hash192: [u8; 16usize],
    pub rand192: [u8; 16usize],
    pub hash256: [u8; 16usize],
    pub rand256: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_local_oob_data() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_local_oob_data>(),
        64usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_local_oob_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_local_oob_data>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_local_oob_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_local_oob_data>())).hash192 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_local_oob_data),
            "::",
            stringify!(hash192)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_local_oob_data>())).rand192 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_local_oob_data),
            "::",
            stringify!(rand192)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_local_oob_data>())).hash256 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_local_oob_data),
            "::",
            stringify!(hash256)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_local_oob_data>())).rand256 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_local_oob_data),
            "::",
            stringify!(rand256)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_add_remote_oob_data {
    pub addr: mgmt_addr_info,
    pub hash192: [u8; 16usize],
    pub rand192: [u8; 16usize],
    pub hash256: [u8; 16usize],
    pub rand256: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_mgmt_cp_add_remote_oob_data() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_add_remote_oob_data>(),
        71usize,
        concat!("Size of: ", stringify!(mgmt_cp_add_remote_oob_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_add_remote_oob_data>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_add_remote_oob_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_add_remote_oob_data>())).addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_remote_oob_data),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_add_remote_oob_data>())).hash192 as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_remote_oob_data),
            "::",
            stringify!(hash192)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_add_remote_oob_data>())).rand192 as *const _ as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_remote_oob_data),
            "::",
            stringify!(rand192)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_add_remote_oob_data>())).hash256 as *const _ as usize
        },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_remote_oob_data),
            "::",
            stringify!(hash256)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_add_remote_oob_data>())).rand256 as *const _ as usize
        },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_remote_oob_data),
            "::",
            stringify!(rand256)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_remove_remote_oob_data {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_cp_remove_remote_oob_data() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_remove_remote_oob_data>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_cp_remove_remote_oob_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_remove_remote_oob_data>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_remove_remote_oob_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_remove_remote_oob_data>())).addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_remove_remote_oob_data),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_start_discovery {
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_start_discovery() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_start_discovery>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_cp_start_discovery))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_start_discovery>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_start_discovery))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_start_discovery>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_start_discovery),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_stop_discovery {
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_stop_discovery() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_stop_discovery>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_cp_stop_discovery))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_stop_discovery>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_stop_discovery))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_stop_discovery>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_stop_discovery),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_confirm_name {
    pub addr: mgmt_addr_info,
    pub name_known: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_confirm_name() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_confirm_name>(),
        8usize,
        concat!("Size of: ", stringify!(mgmt_cp_confirm_name))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_confirm_name>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_confirm_name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_confirm_name>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_confirm_name),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_confirm_name>())).name_known as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_confirm_name),
            "::",
            stringify!(name_known)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_confirm_name {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_rp_confirm_name() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_confirm_name>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_rp_confirm_name))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_confirm_name>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_confirm_name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_confirm_name>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_confirm_name),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_block_device {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_cp_block_device() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_block_device>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_cp_block_device))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_block_device>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_block_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_block_device>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_block_device),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_unblock_device {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_cp_unblock_device() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_unblock_device>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_cp_unblock_device))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_unblock_device>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_unblock_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_unblock_device>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_unblock_device),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_device_id {
    pub source: u16,
    pub vendor: u16,
    pub product: u16,
    pub version: u16,
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_device_id() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_device_id>(),
        8usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_device_id))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_device_id>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_device_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_set_device_id>())).source as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_device_id),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_set_device_id>())).vendor as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_device_id),
            "::",
            stringify!(vendor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_set_device_id>())).product as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_device_id),
            "::",
            stringify!(product)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_set_device_id>())).version as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_device_id),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_static_address {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_static_address() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_static_address>(),
        6usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_static_address))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_static_address>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_static_address))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_set_static_address>())).bdaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_static_address),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_scan_params {
    pub interval: u16,
    pub window: u16,
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_scan_params() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_scan_params>(),
        4usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_scan_params))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_scan_params>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_scan_params))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_set_scan_params>())).interval as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_scan_params),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_set_scan_params>())).window as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_scan_params),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_irk_info {
    pub addr: mgmt_addr_info,
    pub val: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_mgmt_irk_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_irk_info>(),
        23usize,
        concat!("Size of: ", stringify!(mgmt_irk_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_irk_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_irk_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_irk_info>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_irk_info),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_irk_info>())).val as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_irk_info),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_privacy {
    pub privacy: u8,
    pub irk: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_privacy() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_privacy>(),
        17usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_privacy))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_privacy>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_privacy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_set_privacy>())).privacy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_privacy),
            "::",
            stringify!(privacy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_set_privacy>())).irk as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_privacy),
            "::",
            stringify!(irk)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_cp_load_irks {
    pub irk_count: u16,
    pub irks: __IncompleteArrayField<mgmt_irk_info>,
}
#[test]
fn bindgen_test_layout_mgmt_cp_load_irks() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_load_irks>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_cp_load_irks))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_load_irks>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_load_irks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_load_irks>())).irk_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_load_irks),
            "::",
            stringify!(irk_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_load_irks>())).irks as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_load_irks),
            "::",
            stringify!(irks)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_get_conn_info {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_cp_get_conn_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_get_conn_info>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_cp_get_conn_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_get_conn_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_get_conn_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_get_conn_info>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_get_conn_info),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_get_conn_info {
    pub addr: mgmt_addr_info,
    pub rssi: i8,
    pub tx_power: i8,
    pub max_tx_power: i8,
}
#[test]
fn bindgen_test_layout_mgmt_rp_get_conn_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_get_conn_info>(),
        10usize,
        concat!("Size of: ", stringify!(mgmt_rp_get_conn_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_get_conn_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_get_conn_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_get_conn_info>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_conn_info),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_get_conn_info>())).rssi as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_conn_info),
            "::",
            stringify!(rssi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_get_conn_info>())).tx_power as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_conn_info),
            "::",
            stringify!(tx_power)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_get_conn_info>())).max_tx_power as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_conn_info),
            "::",
            stringify!(max_tx_power)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_get_clock_info {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_cp_get_clock_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_get_clock_info>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_cp_get_clock_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_get_clock_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_get_clock_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_get_clock_info>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_get_clock_info),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_get_clock_info {
    pub addr: mgmt_addr_info,
    pub local_clock: u32,
    pub piconet_clock: u32,
    pub accuracy: u16,
}
#[test]
fn bindgen_test_layout_mgmt_rp_get_clock_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_get_clock_info>(),
        17usize,
        concat!("Size of: ", stringify!(mgmt_rp_get_clock_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_get_clock_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_get_clock_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_get_clock_info>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_clock_info),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_get_clock_info>())).local_clock as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_clock_info),
            "::",
            stringify!(local_clock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_get_clock_info>())).piconet_clock as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_clock_info),
            "::",
            stringify!(piconet_clock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_get_clock_info>())).accuracy as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_clock_info),
            "::",
            stringify!(accuracy)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_add_device {
    pub addr: mgmt_addr_info,
    pub action: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_add_device() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_add_device>(),
        8usize,
        concat!("Size of: ", stringify!(mgmt_cp_add_device))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_add_device>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_add_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_add_device>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_device),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_add_device>())).action as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_device),
            "::",
            stringify!(action)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_add_device {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_rp_add_device() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_add_device>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_rp_add_device))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_add_device>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_add_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_add_device>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_add_device),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_remove_device {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_cp_remove_device() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_remove_device>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_cp_remove_device))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_remove_device>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_remove_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_remove_device>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_remove_device),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_remove_device {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_rp_remove_device() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_remove_device>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_rp_remove_device))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_remove_device>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_remove_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_remove_device>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_remove_device),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_conn_param {
    pub addr: mgmt_addr_info,
    pub min_interval: u16,
    pub max_interval: u16,
    pub latency: u16,
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_mgmt_conn_param() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_conn_param>(),
        15usize,
        concat!("Size of: ", stringify!(mgmt_conn_param))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_conn_param>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_conn_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_conn_param>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_conn_param),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_conn_param>())).min_interval as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_conn_param),
            "::",
            stringify!(min_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_conn_param>())).max_interval as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_conn_param),
            "::",
            stringify!(max_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_conn_param>())).latency as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_conn_param),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_conn_param>())).timeout as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_conn_param),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_cp_load_conn_param {
    pub param_count: u16,
    pub params: __IncompleteArrayField<mgmt_conn_param>,
}
#[test]
fn bindgen_test_layout_mgmt_cp_load_conn_param() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_load_conn_param>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_cp_load_conn_param))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_load_conn_param>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_load_conn_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_load_conn_param>())).param_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_load_conn_param),
            "::",
            stringify!(param_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_load_conn_param>())).params as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_load_conn_param),
            "::",
            stringify!(params)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_rp_read_unconf_index_list {
    pub num_controllers: u16,
    pub index: __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_unconf_index_list() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_unconf_index_list>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_unconf_index_list))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_unconf_index_list>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_unconf_index_list))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_unconf_index_list>())).num_controllers as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_unconf_index_list),
            "::",
            stringify!(num_controllers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_unconf_index_list>())).index as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_unconf_index_list),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_read_config_info {
    pub manufacturer: u16,
    pub supported_options: u32,
    pub missing_options: u32,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_config_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_config_info>(),
        10usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_config_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_config_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_config_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_config_info>())).manufacturer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_config_info),
            "::",
            stringify!(manufacturer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_config_info>())).supported_options as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_config_info),
            "::",
            stringify!(supported_options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_config_info>())).missing_options as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_config_info),
            "::",
            stringify!(missing_options)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_external_config {
    pub config: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_external_config() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_external_config>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_external_config))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_external_config>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_external_config))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_set_external_config>())).config as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_external_config),
            "::",
            stringify!(config)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_public_address {
    pub bdaddr: bdaddr_t,
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_public_address() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_public_address>(),
        6usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_public_address))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_public_address>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_public_address))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_set_public_address>())).bdaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_public_address),
            "::",
            stringify!(bdaddr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_cp_start_service_discovery {
    pub type_: u8,
    pub rssi: i8,
    pub uuid_count: u16,
    pub uuids: __IncompleteArrayField<[u8; 16usize]>,
}
#[test]
fn bindgen_test_layout_mgmt_cp_start_service_discovery() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_start_service_discovery>(),
        4usize,
        concat!("Size of: ", stringify!(mgmt_cp_start_service_discovery))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_start_service_discovery>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_start_service_discovery))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_start_service_discovery>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_start_service_discovery),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_start_service_discovery>())).rssi as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_start_service_discovery),
            "::",
            stringify!(rssi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_start_service_discovery>())).uuid_count as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_start_service_discovery),
            "::",
            stringify!(uuid_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_start_service_discovery>())).uuids as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_start_service_discovery),
            "::",
            stringify!(uuids)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_read_local_oob_ext_data {
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_read_local_oob_ext_data() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_read_local_oob_ext_data>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_cp_read_local_oob_ext_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_read_local_oob_ext_data>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_read_local_oob_ext_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_read_local_oob_ext_data>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_read_local_oob_ext_data),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_rp_read_local_oob_ext_data {
    pub type_: u8,
    pub eir_len: u16,
    pub eir: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_local_oob_ext_data() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_local_oob_ext_data>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_local_oob_ext_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_local_oob_ext_data>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_local_oob_ext_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_local_oob_ext_data>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_local_oob_ext_data),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_local_oob_ext_data>())).eir_len as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_local_oob_ext_data),
            "::",
            stringify!(eir_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_local_oob_ext_data>())).eir as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_local_oob_ext_data),
            "::",
            stringify!(eir)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_rp_read_ext_index_list {
    pub num_controllers: u16,
    pub entry: __IncompleteArrayField<mgmt_rp_read_ext_index_list__bindgen_ty_1>,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_read_ext_index_list__bindgen_ty_1 {
    pub index: u16,
    pub type_: u8,
    pub bus: u8,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_ext_index_list__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_ext_index_list__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(mgmt_rp_read_ext_index_list__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_ext_index_list__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(mgmt_rp_read_ext_index_list__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_ext_index_list__bindgen_ty_1>())).index as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_index_list__bindgen_ty_1),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_ext_index_list__bindgen_ty_1>())).type_ as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_index_list__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_ext_index_list__bindgen_ty_1>())).bus as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_index_list__bindgen_ty_1),
            "::",
            stringify!(bus)
        )
    );
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_ext_index_list() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_ext_index_list>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_ext_index_list))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_ext_index_list>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_ext_index_list))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_ext_index_list>())).num_controllers as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_index_list),
            "::",
            stringify!(num_controllers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_ext_index_list>())).entry as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_index_list),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_rp_read_adv_features {
    pub supported_flags: u32,
    pub max_adv_data_len: u8,
    pub max_scan_rsp_len: u8,
    pub max_instances: u8,
    pub num_instances: u8,
    pub instance: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_adv_features() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_adv_features>(),
        8usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_adv_features))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_adv_features>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_adv_features))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_adv_features>())).supported_flags as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_adv_features),
            "::",
            stringify!(supported_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_adv_features>())).max_adv_data_len as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_adv_features),
            "::",
            stringify!(max_adv_data_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_adv_features>())).max_scan_rsp_len as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_adv_features),
            "::",
            stringify!(max_scan_rsp_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_adv_features>())).max_instances as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_adv_features),
            "::",
            stringify!(max_instances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_adv_features>())).num_instances as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_adv_features),
            "::",
            stringify!(num_instances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_adv_features>())).instance as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_adv_features),
            "::",
            stringify!(instance)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_cp_add_advertising {
    pub instance: u8,
    pub flags: u32,
    pub duration: u16,
    pub timeout: u16,
    pub adv_data_len: u8,
    pub scan_rsp_len: u8,
    pub data: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mgmt_cp_add_advertising() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_add_advertising>(),
        11usize,
        concat!("Size of: ", stringify!(mgmt_cp_add_advertising))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_add_advertising>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_add_advertising))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_add_advertising>())).instance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_advertising),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_add_advertising>())).flags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_advertising),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_add_advertising>())).duration as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_advertising),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_add_advertising>())).timeout as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_advertising),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_add_advertising>())).adv_data_len as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_advertising),
            "::",
            stringify!(adv_data_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_add_advertising>())).scan_rsp_len as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_advertising),
            "::",
            stringify!(scan_rsp_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_add_advertising>())).data as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_add_advertising),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_add_advertising {
    pub instance: u8,
}
#[test]
fn bindgen_test_layout_mgmt_rp_add_advertising() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_add_advertising>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_rp_add_advertising))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_add_advertising>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_add_advertising))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_add_advertising>())).instance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_add_advertising),
            "::",
            stringify!(instance)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_remove_advertising {
    pub instance: u8,
}
#[test]
fn bindgen_test_layout_mgmt_cp_remove_advertising() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_remove_advertising>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_cp_remove_advertising))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_remove_advertising>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_remove_advertising))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_remove_advertising>())).instance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_remove_advertising),
            "::",
            stringify!(instance)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_remove_advertising {
    pub instance: u8,
}
#[test]
fn bindgen_test_layout_mgmt_rp_remove_advertising() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_remove_advertising>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_rp_remove_advertising))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_remove_advertising>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_remove_advertising))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_remove_advertising>())).instance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_remove_advertising),
            "::",
            stringify!(instance)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_get_adv_size_info {
    pub instance: u8,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_mgmt_cp_get_adv_size_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_get_adv_size_info>(),
        5usize,
        concat!("Size of: ", stringify!(mgmt_cp_get_adv_size_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_get_adv_size_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_get_adv_size_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_get_adv_size_info>())).instance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_get_adv_size_info),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_cp_get_adv_size_info>())).flags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_get_adv_size_info),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_rp_get_adv_size_info {
    pub instance: u8,
    pub flags: u32,
    pub max_adv_data_len: u8,
    pub max_scan_rsp_len: u8,
}
#[test]
fn bindgen_test_layout_mgmt_rp_get_adv_size_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_get_adv_size_info>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_rp_get_adv_size_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_get_adv_size_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_get_adv_size_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_get_adv_size_info>())).instance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_adv_size_info),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_get_adv_size_info>())).flags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_adv_size_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_get_adv_size_info>())).max_adv_data_len as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_adv_size_info),
            "::",
            stringify!(max_adv_data_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_get_adv_size_info>())).max_scan_rsp_len as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_get_adv_size_info),
            "::",
            stringify!(max_scan_rsp_len)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_rp_read_ext_info {
    pub bdaddr: bdaddr_t,
    pub version: u8,
    pub manufacturer: u16,
    pub supported_settings: u32,
    pub current_settings: u32,
    pub eir_len: u16,
    pub eir: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mgmt_rp_read_ext_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_rp_read_ext_info>(),
        19usize,
        concat!("Size of: ", stringify!(mgmt_rp_read_ext_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_rp_read_ext_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_rp_read_ext_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_ext_info>())).bdaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_ext_info>())).version as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_ext_info>())).manufacturer as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_info),
            "::",
            stringify!(manufacturer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_ext_info>())).supported_settings as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_info),
            "::",
            stringify!(supported_settings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_rp_read_ext_info>())).current_settings as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_info),
            "::",
            stringify!(current_settings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_ext_info>())).eir_len as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_info),
            "::",
            stringify!(eir_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_rp_read_ext_info>())).eir as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_rp_read_ext_info),
            "::",
            stringify!(eir)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_cp_set_appearance {
    pub appearance: u16,
}
#[test]
fn bindgen_test_layout_mgmt_cp_set_appearance() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_cp_set_appearance>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_cp_set_appearance))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_cp_set_appearance>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_cp_set_appearance))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_cp_set_appearance>())).appearance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_cp_set_appearance),
            "::",
            stringify!(appearance)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_ev_cmd_complete {
    pub opcode: u16,
    pub status: u8,
    pub data: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mgmt_ev_cmd_complete() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_cmd_complete>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_ev_cmd_complete))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_cmd_complete>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_cmd_complete))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_cmd_complete>())).opcode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_cmd_complete),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_cmd_complete>())).status as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_cmd_complete),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_cmd_complete>())).data as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_cmd_complete),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_cmd_status {
    pub opcode: u16,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_cmd_status() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_cmd_status>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_ev_cmd_status))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_cmd_status>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_cmd_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_cmd_status>())).opcode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_cmd_status),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_cmd_status>())).status as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_cmd_status),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_controller_error {
    pub error_code: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_controller_error() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_controller_error>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_ev_controller_error))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_controller_error>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_controller_error))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_controller_error>())).error_code as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_controller_error),
            "::",
            stringify!(error_code)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_class_of_dev_changed {
    pub dev_class: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_mgmt_ev_class_of_dev_changed() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_class_of_dev_changed>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_ev_class_of_dev_changed))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_class_of_dev_changed>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_class_of_dev_changed))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_class_of_dev_changed>())).dev_class as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_class_of_dev_changed),
            "::",
            stringify!(dev_class)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct mgmt_ev_local_name_changed {
    pub name: [u8; 249usize],
    pub short_name: [u8; 11usize],
}
#[test]
fn bindgen_test_layout_mgmt_ev_local_name_changed() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_local_name_changed>(),
        260usize,
        concat!("Size of: ", stringify!(mgmt_ev_local_name_changed))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_local_name_changed>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_local_name_changed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_local_name_changed>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_local_name_changed),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_local_name_changed>())).short_name as *const _ as usize
        },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_local_name_changed),
            "::",
            stringify!(short_name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_new_link_key {
    pub store_hint: u8,
    pub key: mgmt_link_key_info,
}
#[test]
fn bindgen_test_layout_mgmt_ev_new_link_key() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_new_link_key>(),
        26usize,
        concat!("Size of: ", stringify!(mgmt_ev_new_link_key))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_new_link_key>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_new_link_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_new_link_key>())).store_hint as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_link_key),
            "::",
            stringify!(store_hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_new_link_key>())).key as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_link_key),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_new_long_term_key {
    pub store_hint: u8,
    pub key: mgmt_ltk_info,
}
#[test]
fn bindgen_test_layout_mgmt_ev_new_long_term_key() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_new_long_term_key>(),
        37usize,
        concat!("Size of: ", stringify!(mgmt_ev_new_long_term_key))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_new_long_term_key>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_new_long_term_key))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_new_long_term_key>())).store_hint as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_long_term_key),
            "::",
            stringify!(store_hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_new_long_term_key>())).key as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_long_term_key),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_ev_device_connected {
    pub addr: mgmt_addr_info,
    pub flags: u32,
    pub eir_len: u16,
    pub eir: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mgmt_ev_device_connected() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_device_connected>(),
        13usize,
        concat!("Size of: ", stringify!(mgmt_ev_device_connected))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_device_connected>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_device_connected))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_connected>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_connected),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_connected>())).flags as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_connected),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_device_connected>())).eir_len as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_connected),
            "::",
            stringify!(eir_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_connected>())).eir as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_connected),
            "::",
            stringify!(eir)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_device_disconnected {
    pub addr: mgmt_addr_info,
    pub reason: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_device_disconnected() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_device_disconnected>(),
        8usize,
        concat!("Size of: ", stringify!(mgmt_ev_device_disconnected))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_device_disconnected>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_device_disconnected))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_device_disconnected>())).addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_disconnected),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_device_disconnected>())).reason as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_disconnected),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_connect_failed {
    pub addr: mgmt_addr_info,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_connect_failed() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_connect_failed>(),
        8usize,
        concat!("Size of: ", stringify!(mgmt_ev_connect_failed))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_connect_failed>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_connect_failed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_connect_failed>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_connect_failed),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_connect_failed>())).status as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_connect_failed),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_pin_code_request {
    pub addr: mgmt_addr_info,
    pub secure: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_pin_code_request() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_pin_code_request>(),
        8usize,
        concat!("Size of: ", stringify!(mgmt_ev_pin_code_request))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_pin_code_request>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_pin_code_request))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_pin_code_request>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_pin_code_request),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_pin_code_request>())).secure as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_pin_code_request),
            "::",
            stringify!(secure)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_user_confirm_request {
    pub addr: mgmt_addr_info,
    pub confirm_hint: u8,
    pub value: u32,
}
#[test]
fn bindgen_test_layout_mgmt_ev_user_confirm_request() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_user_confirm_request>(),
        12usize,
        concat!("Size of: ", stringify!(mgmt_ev_user_confirm_request))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_user_confirm_request>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_user_confirm_request))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_user_confirm_request>())).addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_user_confirm_request),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_user_confirm_request>())).confirm_hint as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_user_confirm_request),
            "::",
            stringify!(confirm_hint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_user_confirm_request>())).value as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_user_confirm_request),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_user_passkey_request {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_ev_user_passkey_request() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_user_passkey_request>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_ev_user_passkey_request))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_user_passkey_request>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_user_passkey_request))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_user_passkey_request>())).addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_user_passkey_request),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_auth_failed {
    pub addr: mgmt_addr_info,
    pub status: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_auth_failed() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_auth_failed>(),
        8usize,
        concat!("Size of: ", stringify!(mgmt_ev_auth_failed))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_auth_failed>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_auth_failed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_auth_failed>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_auth_failed),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_auth_failed>())).status as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_auth_failed),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_ev_device_found {
    pub addr: mgmt_addr_info,
    pub rssi: i8,
    pub flags: u32,
    pub eir_len: u16,
    pub eir: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mgmt_ev_device_found() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_device_found>(),
        14usize,
        concat!("Size of: ", stringify!(mgmt_ev_device_found))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_device_found>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_device_found))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_found>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_found),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_found>())).rssi as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_found),
            "::",
            stringify!(rssi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_found>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_found),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_found>())).eir_len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_found),
            "::",
            stringify!(eir_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_found>())).eir as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_found),
            "::",
            stringify!(eir)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_discovering {
    pub type_: u8,
    pub discovering: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_discovering() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_discovering>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_ev_discovering))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_discovering>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_discovering))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_discovering>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_discovering),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_discovering>())).discovering as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_discovering),
            "::",
            stringify!(discovering)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_device_blocked {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_ev_device_blocked() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_device_blocked>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_ev_device_blocked))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_device_blocked>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_device_blocked))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_blocked>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_blocked),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_device_unblocked {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_ev_device_unblocked() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_device_unblocked>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_ev_device_unblocked))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_device_unblocked>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_device_unblocked))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_unblocked>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_unblocked),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_device_unpaired {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_ev_device_unpaired() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_device_unpaired>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_ev_device_unpaired))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_device_unpaired>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_device_unpaired))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_unpaired>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_unpaired),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_passkey_notify {
    pub addr: mgmt_addr_info,
    pub passkey: u32,
    pub entered: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_passkey_notify() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_passkey_notify>(),
        12usize,
        concat!("Size of: ", stringify!(mgmt_ev_passkey_notify))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_passkey_notify>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_passkey_notify))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_passkey_notify>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_passkey_notify),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_passkey_notify>())).passkey as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_passkey_notify),
            "::",
            stringify!(passkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_passkey_notify>())).entered as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_passkey_notify),
            "::",
            stringify!(entered)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_new_irk {
    pub store_hint: u8,
    pub rpa: bdaddr_t,
    pub key: mgmt_irk_info,
}
#[test]
fn bindgen_test_layout_mgmt_ev_new_irk() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_new_irk>(),
        30usize,
        concat!("Size of: ", stringify!(mgmt_ev_new_irk))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_new_irk>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_new_irk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_new_irk>())).store_hint as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_irk),
            "::",
            stringify!(store_hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_new_irk>())).rpa as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_irk),
            "::",
            stringify!(rpa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_new_irk>())).key as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_irk),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_csrk_info {
    pub addr: mgmt_addr_info,
    pub type_: u8,
    pub val: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_mgmt_csrk_info() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_csrk_info>(),
        24usize,
        concat!("Size of: ", stringify!(mgmt_csrk_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_csrk_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_csrk_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_csrk_info>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_csrk_info),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_csrk_info>())).type_ as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_csrk_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_csrk_info>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_csrk_info),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_new_csrk {
    pub store_hint: u8,
    pub key: mgmt_csrk_info,
}
#[test]
fn bindgen_test_layout_mgmt_ev_new_csrk() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_new_csrk>(),
        25usize,
        concat!("Size of: ", stringify!(mgmt_ev_new_csrk))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_new_csrk>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_new_csrk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_new_csrk>())).store_hint as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_csrk),
            "::",
            stringify!(store_hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_new_csrk>())).key as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_csrk),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_device_added {
    pub addr: mgmt_addr_info,
    pub action: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_device_added() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_device_added>(),
        8usize,
        concat!("Size of: ", stringify!(mgmt_ev_device_added))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_device_added>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_device_added))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_added>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_added),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_added>())).action as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_added),
            "::",
            stringify!(action)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_device_removed {
    pub addr: mgmt_addr_info,
}
#[test]
fn bindgen_test_layout_mgmt_ev_device_removed() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_device_removed>(),
        7usize,
        concat!("Size of: ", stringify!(mgmt_ev_device_removed))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_device_removed>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_device_removed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_device_removed>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_device_removed),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_new_conn_param {
    pub addr: mgmt_addr_info,
    pub store_hint: u8,
    pub min_interval: u16,
    pub max_interval: u16,
    pub latency: u16,
    pub timeout: u16,
}
#[test]
fn bindgen_test_layout_mgmt_ev_new_conn_param() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_new_conn_param>(),
        16usize,
        concat!("Size of: ", stringify!(mgmt_ev_new_conn_param))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_new_conn_param>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_new_conn_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_new_conn_param>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_conn_param),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_new_conn_param>())).store_hint as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_conn_param),
            "::",
            stringify!(store_hint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_new_conn_param>())).min_interval as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_conn_param),
            "::",
            stringify!(min_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_new_conn_param>())).max_interval as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_conn_param),
            "::",
            stringify!(max_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_new_conn_param>())).latency as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_conn_param),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_new_conn_param>())).timeout as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_new_conn_param),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_ext_index_added {
    pub type_: u8,
    pub bus: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_ext_index_added() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_ext_index_added>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_ev_ext_index_added))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_ext_index_added>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_ext_index_added))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_ext_index_added>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_ext_index_added),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_ext_index_added>())).bus as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_ext_index_added),
            "::",
            stringify!(bus)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_ext_index_removed {
    pub type_: u8,
    pub bus: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_ext_index_removed() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_ext_index_removed>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_ev_ext_index_removed))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_ext_index_removed>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_ext_index_removed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_ext_index_removed>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_ext_index_removed),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_ext_index_removed>())).bus as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_ext_index_removed),
            "::",
            stringify!(bus)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_ev_local_oob_data_updated {
    pub type_: u8,
    pub eir_len: u16,
    pub eir: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mgmt_ev_local_oob_data_updated() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_local_oob_data_updated>(),
        3usize,
        concat!("Size of: ", stringify!(mgmt_ev_local_oob_data_updated))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_local_oob_data_updated>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_local_oob_data_updated))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_local_oob_data_updated>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_local_oob_data_updated),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_local_oob_data_updated>())).eir_len as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_local_oob_data_updated),
            "::",
            stringify!(eir_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_local_oob_data_updated>())).eir as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_local_oob_data_updated),
            "::",
            stringify!(eir)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_advertising_added {
    pub instance: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_advertising_added() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_advertising_added>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_ev_advertising_added))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_advertising_added>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_advertising_added))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_advertising_added>())).instance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_advertising_added),
            "::",
            stringify!(instance)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mgmt_ev_advertising_removed {
    pub instance: u8,
}
#[test]
fn bindgen_test_layout_mgmt_ev_advertising_removed() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_advertising_removed>(),
        1usize,
        concat!("Size of: ", stringify!(mgmt_ev_advertising_removed))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_advertising_removed>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_advertising_removed))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_advertising_removed>())).instance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_advertising_removed),
            "::",
            stringify!(instance)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct mgmt_ev_ext_info_changed {
    pub eir_len: u16,
    pub eir: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mgmt_ev_ext_info_changed() {
    assert_eq!(
        ::std::mem::size_of::<mgmt_ev_ext_info_changed>(),
        2usize,
        concat!("Size of: ", stringify!(mgmt_ev_ext_info_changed))
    );
    assert_eq!(
        ::std::mem::align_of::<mgmt_ev_ext_info_changed>(),
        1usize,
        concat!("Alignment of ", stringify!(mgmt_ev_ext_info_changed))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mgmt_ev_ext_info_changed>())).eir_len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_ext_info_changed),
            "::",
            stringify!(eir_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgmt_ev_ext_info_changed>())).eir as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mgmt_ev_ext_info_changed),
            "::",
            stringify!(eir)
        )
    );
}

extern "C" {
    #[link_name = "\u{1}mgmt_op"]
    pub static mut mgmt_op: [*const ::std::os::raw::c_char; 68usize];
}

extern "C" {
    #[link_name = "\u{1}mgmt_ev"]
    pub static mut mgmt_ev: [*const ::std::os::raw::c_char; 38usize];
}

extern "C" {
    #[link_name = "\u{1}mgmt_status"]
    pub static mut mgmt_status: [*const ::std::os::raw::c_char; 21usize];
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
